<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.anipick.backend.explore.mapper.ExploreMapper">

    <!-- 공통 필터링(년도/분기/타입) -->
    <sql id="commonFilters">
        <if test="startDate != null and endDate != null">
            AND a.start_date BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="typeConvertSize &gt; 0">
            AND a.format IN
            <foreach item="f" collection="types" open="(" separator="," close=")">
                #{f}
            </foreach>
        </if>
    </sql>

    <!-- 전체 카운터 -->
    <select id="countExplored"
            parameterType="com.anipick.backend.explore.dto.ExploreRequestDto"
            resultType="long">
        SELECT COUNT(DISTINCT a.anime_id)
        FROM Anime a
            <if test="genresSize > 0">
            <choose>
            <!-- 옵션 OR 일 경우 -->
                <when test="genreOp == 'OR'">
                    JOIN AnimeGenres ag ON ag.anime_id = a.anime_id
                    AND ag.genre_id IN
                    <foreach item="g" collection="genres" open="(" separator="," close=")">
                        #{g}
                    </foreach>
                </when>
            <!-- 옵션 AND 일 경우 -->
                <otherwise>
                    JOIN (
                        SELECT anime_id
                        FROM AnimeGenres
                        WHERE genre_id IN
                        <foreach item="g" collection="genres" open="(" separator="," close=")">
                            #{g}
                        </foreach>
                        GROUP BY anime_id
                        HAVING COUNT(DISTINCT genre_id) = #{genresSize}
                    ) ag2 ON ag2.anime_id = a.anime_id
                </otherwise>
            </choose>
        </if>
        <where>
            <include refid="commonFilters"/>
        </where>
    </select>

    <!-- 탐색 조회 -->
    <select id="selectExplored"
            parameterType="com.anipick.backend.explore.dto.ExploreRequestDto"
            resultType="com.anipick.backend.explore.dto.ExploreItemDto">
        SELECT
        a.anime_id        AS id,
        a.title_kor       AS title,
        a.cover_image_url AS coverImageUrl,
        a.review_average_score   AS averageScore,
        pao.popularity_anime_order_id AS popularId
        FROM Anime a

        <!-- 장르 필터링 -->
        <if test="genres != null and genres.size() &gt; 0">
            <choose>
                <!-- 옵션 OR 일 경우 -->
                <when test="genreOp == 'OR'">
                    JOIN (
                    SELECT DISTINCT anime_id
                    FROM AnimeGenres
                    WHERE genre_id IN
                    <foreach item="g" collection="genres" open="(" separator="," close=")">
                        #{g}
                    </foreach>
                    ) ag2 ON ag2.anime_id = a.anime_id
                </when>
                <!-- 옵션 AND 일 경우 -->
                <otherwise>
                    JOIN (
                    SELECT anime_id
                    FROM AnimeGenres
                    WHERE genre_id IN
                    <foreach item="g" collection="genres" open="(" separator="," close=")">
                        #{g}
                    </foreach>
                    GROUP BY anime_id
                    HAVING COUNT(DISTINCT genre_id) = #{genresSize}
                    ) ag2 ON ag2.anime_id = a.anime_id
                </otherwise>
            </choose>
        </if>

        <!-- 커서 / 정렬 조인 / 조건 -->
        <choose>
            <!-- 인기순 -->
            <when test="sort == 'popularity'">
                JOIN PopularityAnimeOrder pao
                ON pao.anime_id = a.anime_id
                <if test="lastId != null">
                    AND pao.popularity_anime_order_id > #{lastId}
                </if>
                <where>1=1<include refid="commonFilters"/></where>
                ORDER BY ${orderByQuery}
            </when>
            <!-- 평점순 -->
            <otherwise>
                LEFT JOIN PopularityAnimeOrder pao
                ON pao.anime_id = a.anime_id
                <where>
                      <if test="lastId != null">
                        <choose>
                          <when test="lastValue != null">
                            (
                              a.review_average_score &lt; #{lastValue}
                              OR
                              (a.review_average_score = #{lastValue} AND a.anime_id &lt; #{lastId})
                            )
                          </when>
                          <!-- ID만 있을 경우 -->
                          <otherwise>
                            a.review_average_score IS NULL
                            AND a.anime_id &lt; #{lastId}
                          </otherwise>
                        </choose>
                      </if>
                  <include refid="commonFilters"/>
                </where>
                ORDER BY ${orderByQuery}, a.anime_id DESC
            </otherwise>
        </choose>

        LIMIT #{size}
    </select>

    <select id="selectExploredTest"
            parameterType="com.anipick.backend.explore.dto.ExploreRequestDto"
            resultType="com.anipick.backend.explore.dto.ExploreItemDto">
        SELECT DISTINCT
            a.anime_id        AS id,
            a.title_kor       AS title,
            a.cover_image_url AS coverImageUrl,
            a.review_average_score   AS averageScore,
            pao.popularity_anime_order_id AS popularId
        FROM Anime a
        JOIN AnimeGenres ag
            ON ag.anime_id = a.anime_id
        AND genre_id IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
        LEFT JOIN anipick2.PopularityAnimeOrder pao
        ON pao.anime_id = a.anime_id
                AND a.format IN ('TV', 'TV_SHORT', 'ONA')
        <if test="startDate != null and endDate != null">
            AND a.start_date BETWEEN #{startDate} AND #{endDate}
        </if>
                ORDER BY a.review_average_score DESC, a.anime_id DESC
    </select>


    <select id="selectExploredSemiJoin"
            parameterType="com.anipick.backend.explore.dto.ExploreRequestDto"
            resultType="com.anipick.backend.explore.dto.ExploreItemDto">
        SELECT DISTINCT
        a.anime_id        AS id,
        a.title_kor       AS title,
        a.cover_image_url AS coverImageUrl,
        a.review_average_score   AS averageScore,
        pao.popularity_anime_order_id AS popularId
        FROM Anime a
                LEFT JOIN anipick2.PopularityAnimeOrder pao
                ON pao.anime_id = a.anime_id
                where EXISTS (SELECT 1
                FROM anipick2.AnimeGenres g
                WHERE g.anime_id = a.anime_id
                AND g.genre_id IN (1))
                AND a.format IN ('TV', 'TV_SHORT', 'ONA')
                <if test="startDate != null and endDate != null">
                    AND a.start_date BETWEEN #{startDate} AND #{endDate}
                </if>
        ORDER BY a.review_average_score DESC, a.anime_id DESC;
            </select>

        <select id="selectExploredBestFast"
                parameterType="com.anipick.backend.explore.dto.ExploreRequestDto"
                resultType="com.anipick.backend.explore.dto.ExploreItemDto">
            SELECT a.anime_id AS id,
                   a.title_kor AS title,
                   a.cover_image_url AS coverImageUrl,
                   a.review_average_score AS averageScore,
                   pao.popularity_anime_order_id AS popularId
            FROM anipick2.anime a
                     LEFT JOIN anipick2.popularityanimeorder pao ON pao.anime_id = a.anime_id
            WHERE
            <if test="startDate != null and endDate != null">
                a.start_date BETWEEN #{startDate} AND #{endDate}
            </if>
              AND a.format IN ('TV', 'TV_SHORT', 'ONA')
              AND EXISTS (
                SELECT 1 FROM anipick2.animegenres ag
                WHERE ag.anime_id = a.anime_id
                  AND ag.genre_id IN (1,2,3,4,5,6,8,9,10)
            )
            ORDER BY a.review_average_score DESC, a.anime_id DESC
                limit 18;
        </select>


        </mapper>


        <!--        SELECT distinct-->
<!--        a.anime_id        AS id,-->
<!--        a.title_kor       AS title,-->
<!--        a.cover_image_url AS coverImageUrl,-->
<!--        a.review_average_score   AS averageScore,-->
<!--        pao.popularity_anime_order_id AS popularId-->
<!--        FROM anipick2.Anime a-->
<!--        JOIN anipick2.AnimeGenres ag-->
<!--        ON ag.anime_id = a.anime_id-->
<!--        and genre_id IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)-->
<!--        LEFT JOIN anipick2.PopularityAnimeOrder pao-->
<!--        ON pao.anime_id = a.anime_id-->

<!--        AND a.format IN ('TV', 'TV_SHORT', 'ONA')-->
<!--        AND       a.start_date BETWEEN '2010-02-03' and '2020-10-30'-->
<!--        ORDER BY a.review_average_score DESC, a.anime_id DESC-->



<!--        SELECT a.anime_id                    AS id,-->
<!--        a.title_kor                   AS title,-->
<!--        a.cover_image_url             AS coverImageUrl,-->
<!--        a.review_average_score        AS averageScore,-->
<!--        pao.popularity_anime_order_id AS popularId,-->

<!--        a.start_date,-->
<!--        a.end_date-->
<!--        FROM anipick2.Anime a-->
<!--        LEFT JOIN anipick2.PopularityAnimeOrder pao-->
<!--        ON pao.anime_id = a.anime_id-->
